import os
from openai import AsyncOpenAI
import re

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def load_text_file(filename: str, fallback: str = "") -> str:
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return file.read().strip()
    except Exception:
        return fallback

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
SYSTEM_PROMPT = load_text_file("utils/assistant_prompt.txt", "–¢–∏ ‚Äî AI-–ø–æ–º—ñ—á–Ω–∏–∫.")
KNOWLEDGE_CONTEXT = load_text_file("utils/assistant_knowledge.txt", "")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å OpenAI
async def ask_openai(prompt: str, history: str = "", extra_knowledge: str = "") -> dict:
    try:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]

        if KNOWLEDGE_CONTEXT:
            messages.append({"role": "system", "content": f"–ö–æ—Ä–∏—Å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n{KNOWLEDGE_CONTEXT}"})

        if extra_knowledge:
            messages.append({"role": "system", "content": f"–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n{extra_knowledge}"})

        if history:
            for line in history.splitlines():
                if line.startswith("üë§"):
                    messages.append({"role": "user", "content": line[2:].strip()})
                elif line.startswith("ü§ñ"):
                    messages.append({"role": "assistant", "content": line[2:].strip()})

        messages.append({"role": "user", "content": prompt})

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7,
        )

        reply_raw = response.choices[0].message.content.strip()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ [ASK_OWNER]
        not_confident = "[ASK_OWNER]" in reply_raw.upper()

        # –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        extra_tag = None
        match = re.search(r"\[([A-Z_]+)\]", reply_raw.upper())
        if match and match.group(1) != "ASK_OWNER":
            extra_tag = match.group(1)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        reply_clean = re.sub(r"\[[^\]]+\]", "", reply_raw).strip()

        return {
            "text": reply_clean,
            "not_confident": not_confident,
            "extra_tag": extra_tag
        }

    except Exception as e:
        return {
            "text": f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ AI: {e}",
            "not_confident": True,
            "extra_tag": None
        }
